import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Thiết lập seed
seed = 2310  # Thay đổi thành mã số học viên cao học của bạn
np.random.seed(seed)
random.seed(seed)

# Hàm tạo dữ liệu
def generate_data(n):
    x = np.random.rand(n, 1)
    noise = np.random.normal(0, 0.03, x.shape)
    y = np.sin(1 + x**2) + noise
    return x, y

# Hàm huấn luyện và tính toán lỗi
def evaluate_models(train_x, train_y, test_x, test_y, max_degree=9):
    E_in = []
    E_out = []
    for degree in range(1, max_degree + 1):
        poly = PolynomialFeatures(degree)
        X_poly_train = poly.fit_transform(train_x)
        X_poly_test = poly.transform(test_x)
        
        model = LinearRegression()
        model.fit(X_poly_train, train_y)
        
        y_train_pred = model.predict(X_poly_train)
        y_test_pred = model.predict(X_poly_test)
        
        E_in.append(mean_squared_error(train_y, y_train_pred))
        E_out.append(mean_squared_error(test_y, y_test_pred))
    
    return E_in, E_out

# Tạo 03 bộ dữ liệu và đánh giá các mô hình
datasets = {}
results = {}
for i in range(1, 4):
    train_x, train_y = generate_data(10)
    test_x, test_y = generate_data(10)
    datasets[f'D{i}'] = {'train': (train_x, train_y), 'test': (test_x, test_y)}
    E_in, E_out = evaluate_models(train_x, train_y, test_x, test_y)
    results[f'D{i}'] = {'E_in': E_in, 'E_out': E_out}

# In bảng kết quả
for key in results:
    print(f"Dataset {key}:")
    print("Degree | E_in  | E_out")
    for degree in range(1, 10):
        print(f"  {degree}    | {results[key]['E_in'][degree-1]:.4f} | {results[key]['E_out'][degree-1]:.4f}")
    print("\n")

# Trực quan hóa kết quả
fig, axs = plt.subplots(3, 3, figsize=(15, 15))
fig.subplots_adjust(hspace=0.4, wspace=0.4)
for i, (dataset_key, dataset) in enumerate(datasets.items()):
    train_x, train_y = dataset['train']
    for degree in range(1, 10):
        poly = PolynomialFeatures(degree)
        X_poly_train = poly.fit_transform(train_x)
        
        model = LinearRegression()
        model.fit(X_poly_train, train_y)
        
        x_fit = np.linspace(0, 1, 100).reshape(-1, 1)
        y_fit = model.predict(poly.transform(x_fit))
        
        ax = axs[i, degree-1]
        ax.scatter(train_x, train_y, color='blue')
        ax.plot(x_fit, y_fit, color='red')
        ax.set_title(f'Dataset {dataset_key} - Degree {degree}')
plt.show()

# Thực hiện tương tự với kích thước tập train và test là 100 và 1000
sizes = [100, 1000]
for size in sizes:
    datasets = {}
    results = {}
    for i in range(1, 4):
        train_x, train_y = generate_data(size)
        test_x, test_y = generate_data(size)
        datasets[f'D{i}'] = {'train': (train_x, train_y), 'test': (test_x, test_y)}
        E_in, E_out = evaluate_models(train_x, train_y, test_x, test_y)
        results[f'D{i}'] = {'E_in': E_in, 'E_out': E_out}

    # In bảng kết quả
    for key in results:
        print(f"Dataset {key} (size {size}):")
        print("Degree | E_in  | E_out")
        for degree in range(1, 10):
            print(f"  {degree}    | {results[key]['E_in'][degree-1]:.4f} | {results[key]['E_out'][degree-1]:.4f}")
        print("\n")
